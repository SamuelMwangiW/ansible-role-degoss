---
- include: versions/latest.yml
  when: goss_version == "latest"

- include: versions/pinned.yml
  when: goss_version != "latest"

# set play facts
- name: establish download url
  set_fact:
    goss_download_url: "{{ goss_github_repo_url }}/releases/download/v{{ goss_real_version }}/goss-linux-amd64"

# create goss directories
- name: create goss directories
  file: path={{ item }} state=directory
  with_items:
    - "{{ degoss_tmp_root }}"
    - "{{ degoss_test_root }}"
    - "{{ degoss_goss_install_dir }}"
  changed_when: degoss_changed_when

# download goss
- name: install
  get_url:
    url: "{{ goss_download_url }}"
    dest: "{{ degoss_goss_bin }}-{{ goss_real_version }}"
    mode: 0755
  changed_when: degoss_changed_when

# symlink
- name: link
  file:
    state: link
    src: "{{ degoss_goss_bin }}-{{ goss_real_version }}"
    dest: "{{ degoss_goss_bin }}"
    force: true
  changed_when: degoss_changed_when

# deploy test files including the main and additional test files
- name: deploy test files
  copy: src={{ item }} dest={{ degoss_test_root }}
  with_items: "{{ [goss_file] + goss_addtl_files + goss_addtl_dirs }}"
  changed_when: degoss_changed_when

# run the tests
- name: run tests
  goss:
    executable: "{{ degoss_goss_bin }}"
    path: "{{ goss_file }}"
    format: "{{ goss_output_format }}"
    env_vars: "{{ goss_env_vars }}"
  failed_when: false
  register: goss_output

# clean everything up
- name: clean
  file: path={{ degoss_tmp_root }} state=absent
  when: degoss_no_clean is undefined and not (degoss_no_clean|bool)
  changed_when: degoss_changed_when

- name: emit debugging output
  debug:
    msg: "output info: {{ goss_output }}"
  # only emit debug output when degoss_debug/degoss_dump_output is defined and truthy and when goss failed for sure
  when: |-
      (degoss_dump_output is defined and degoss_dump_output|bool) or (degoss_debug is defined and degoss_debug|bool)

# our output callback plugin will catch the tag of this and format output accordingly
- name: report errors
  fail: msg="Goss Tests Failed."
  when: goss_output.get('goss_failed') | bool
  tags: [format_goss_output]

- name: report module errors
  fail: msg="Goss Module Run Failed."
  when: goss_output.get('msg')|lower == "module failure"
  tags: [format_goss_stacktrace]
